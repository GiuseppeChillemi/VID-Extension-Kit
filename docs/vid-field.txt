FIELD - Improved VID Field

=options no-nums no-toc

===Quick Manual

FIELD is a superset of the ordinary VID field with an extra set of useful functions for evaluating the contents and provides more control over key presses. This way, you don't have to mess around with the FEEL object as much, and you can write much less code. It has the same name as the current FIELD, so you can drop it into your existing code.

Right now, the new FIELD only does a limited set of things, but hopefully it will grow and eventually, it's hoped that the features will eventually creep into the official VID.

The new FIELD is currently in version 0.0.2.

===Installation

You can get it from <a href="http://www.hmkdesign.dk/rebol/vid/src/vid-field.r">here</a>.

Or you can do this:

  do http://www.hmkdesign.dk/rebol/vid/src/vid-field.r

And you're ready to go!

===Examples

  view layout [
    field
  ]

This provides a FIELD that looks and behaves like a regular FIELD.

  view layout [
    field numeric
  ]

This provides a FIELD that only accepts numeric keypresses, like 0-9, comma (,), punctuation (.) and + and -. Both positive, negative, integers and decimals are supported.

  view layout [
    field key-action [print get-face face]
  ]

This provides a FIELD that will perform the action given in the block on every single key press. You have access to the same parts of the face as through any normal action.

  view layout [
    field key-action [probe event/key]
  ]

Above, as you can see, you also have access to the event port.

  view layout [
    field key-action [probe event/key] [print "Leaving field!"]
  ]

Of course like the regular field, you have access to the normal action as well. <b>The normal action is performed before <tt>key-action</tt>.</b>

  view layout [
    field key-range [#"a" - #"f" #"A" - #"F" #"0" - #"9"]
  ]

This defines a limited key range for the field, so it only accepts hexadecimal input. The syntax for the block is the same as for creating bitsets.

  view layout [
    field numeric range [0 15]
  ]

This defines the range of numbers allowed to be used in the field. If any other number is entered, the number will be confined to the range, when you leave the field.

  view layout [
    field numeric numeric-keys range [0 15]
  ]

Same as before, except + and - keys are now usable to adjust the number. <tt>numeric-keys</tt> only works together with <tt>numeric</tt>.

  view layout [
    field max-length 5
  ]

This will restrict the length of the input in the field to 5 chars.

  view layout [
    a: field next-face 'c
    b: field next-face 'a
    c: field next-face 'b
  ]

This will allow you to tab to a specific field or any other face, as long as it's provided as a <tt>lit-word!</tt>.

  view layout [
    a: field back-face 'c
    b: field back-face 'a
    c: field back-face 'b
  ]

Same as the above, except <tt>back-face</tt> works on shift+Tab.

---Auto-filling

Auto-filling is the setting of field values from a block of existing data. This is different from just setting the field values plainly, because the values are not confirmed. They appear in a pale gray as opposed for solid black as with manually entered text.

You can auto-fill fields from a block of data, as long as you keep the format of the block in one of the following:

  vals: ["a" "b" "c" "d" "e" "f"]

This format will cycle through all values and map them to the number of fields you have in the form, so:

  view layout [
    field auto-fill vals
    field auto-fill vals
  ]

Another form is to use objects:

  [
    make object! [
      name: "a"
      address: "b"
    ]
    make object! [
      name: "c"
      address: "d"
    ]
  ]

This is more flexible, as you can assign each object value to a specific field.

  view layout [
    field auto-fill vals/address
    field auto-fill vals/name
  ]

To increase the flexibility in when to use auto-fill in your user interface, the actions are not directly coded into the style, so as standard, you need specify when you want to auto-fill.
Certain functions are available to trigger auto-fill, which you for example can do through KEY-ACTION.

  view layout [
    field auto-fill vals key-action [fill vals]
    field auto-fill vals
  ]

This means that a field that can do auto-fill, may not trigger an auto-fill itself. For the above example, only the first field will trigger auto-fill.
To do this for all fields, simply use the same key action in all fields, here shown by building a base style:

  view layout [
    style auto-field field auto-fill vals key-action [fill vals]
    auto-field
    auto-field
  ]

NOTES:

things to store in each field

fill-block
location, either as index or as word

END NOTES

===NAME-FIELD

<tt>name-field</tt> is a <tt>field</tt> with a specific <tt>KEY-ACTION</tt> suitable for entering names. On each keypress it converts each letter at the start of the text and after each space to uppercase, removes double spaces and trims the head of the text.

When tabbing out, the text is trimmed at the tail as well.

Usage:

  view layout [name-field]

If you want to extend the <tt>key-action</tt> for <tt>name-field</tt>, you can append more code to the <tt>key-action</tt> block:

  view layout [name-field with [append key-action [probe event/key]]]

===User Interaction

Numeric fields can be altered using the + and - keys, when <tt>numeric-keys</tt> is enabled. You can always alter the number, using the scroll-wheel. When holding ctrl while using the scroll-wheel or the +/- keys, it will increment/decrement in steps of 10 instead of 1.

;When restricting the size of a field with <tt>max-length</tt>, and using th